//Write a PHP script to change the preferences of your web page like font style, font size, font color, background color using cookie. Display selected setting on next web page and actual implementation (with new settings) on third page (Use Cookies).

//html file
<html>
<body>
<form action="1.php" method="get">
<center>
<b>select font style:</b><input type=text name=s1><br>
<b>Enter font size:</b><input type=text name=s><br>
<b>Enter font color:</b><input type=text name=c><br>
<b>Enter background color:</b><input type=text name=b><br>
<input type=submit value="Next">
</center>
</form>
</body>
<html>

//php1 file
<?php
	echo "Style is ".$_GET['s1']." Color is ".$_GET['c']." Background color is ".$_GET['b']." size is ".$_GET['s'];
	setcookie("set1",$_GET['s1'],time()+3600);
	setcookie("set2",$_GET['c'],time()+3600);
	setcookie("set3",$_GET['b'],time()+3600);
	setcookie("set4",$_GET['s'],time()+3600);
?>
<a href="2.php"><br><br>Show</a>

//php2 file
<?php
$style=$_COOKIE['set1'];
$color=$_COOKIE['set2'];
$size=$_COOKIE['set4'];
$b_color=$_COOKIE['set3'];
$msg="Hello php";
echo"<body bgcolor=$b_color>";
echo"<font color=$color size=$size face=$style>$msg";
echo"</font></body>";
?>

//Create ‘Salary’ Data set . Build a linear regression model by identifying independent and target
variable. Split the variables into training and testing sets and print them. Build a simple linear regression model for predicting purchases. 

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

num_samples = 1000
salary_mean = 50000
salary_std = 10000
purchases_slope = 0.001
purchases_intercept = 10

salary = np.random.normal(salary_mean, salary_std, num_samples)
purchases = salary * purchases_slope + purchases_intercept + np.random.normal(0, 5, num_samples)

data = pd.DataFrame({'Salary': salary, 'Purchases': purchases})

X = data[['Salary']]
y = data['Purchases']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = LinearRegression()
model.fit(X_train, y_train)
train_rmse = np.sqrt(mean_squared_error(y_train, model.predict(X_train)))
test_rmse = np.sqrt(mean_squared_error(y_test, model.predict(X_test)))

print("Training RMSE:", train_rmse)
print("Testing RMSE:", test_rmse)

plt.scatter(X_test, y_test, color = 'green')
plt.plot(X_train, model.predict(X_train), color='red',linewidth=3)
plt.title('Regression(Salary)')
plt.xlabel('Salary')
plt.ylabel('Purchases')
plt.show()
