//Write Ajax program to fetch suggestions when is user is typing in a textbox. (eg like google suggestions. Hint create array of suggestions and matching string will be displayed) 

//html
<html>

<head>
    <script type="text/javascript">
        function m1(str) {
            var ob = false;
            ob = new XMLHttpRequest();
            ob.open("GET", "1.php?q=" + str);
            ob.send();
            ob.onreadystatechange = function () {
                if (ob.readyState == 4 && ob.status == 200) {
                    document.getElementById("a").innerHTML = ob.responseText;
                }
            }
        }
    </script>
</head>

<body>
    <form>
        Search<input type=text name=search size="20" onkeyup="m1(form.search.value)">
        <input type=button value="submit" onclick="m1(form.search.value)">
    </form>
    suggestions :<span id="a"></span><br>

</body>
</html>

//php
<?php
$a=array("pune","satara","nashik","sangli","mumbai","murud","akola","dound","dhule","ratnagiri","rajpur");
$q=$_GET['q'];
if(strlen($q)>0)
{       
    $match="";
    for($i=0;$i<count($a);$i++)
    {
    if(strtolower($q)==strtolower(substr($a[$i],0,strlen($q))))
    {
        if($match=="")
            $match=$a[$i];                         
        else 
            $match=$match.",".$a[$i];
    }          
    }
if($match=="")
    echo "No Suggestios";
else 
    echo $match;
}
?>

//Create the following dataset in python & Convert the categorical values into numeric format.Apply the apriori algorithm on the above dataset to generate the frequent itemsets and association rules. Repeat the process with different min_sup values

import numpy as np 
import pandas as pd 
from mlxtend.frequent_patterns import apriori, association_rules 

transactions = [['eggs','milk','bread'],['eggs','apple'],['milk','bread'],['apple', 'milk'],['milk','apple','bread']]

from mlxtend.preprocessing import TransactionEncoder
te=TransactionEncoder()
te_array=te.fit(transactions).transform(transactions)
df=pd.DataFrame(te_array, columns=te.columns_)
df = df.astype(int)
df

freq_items = apriori(df, min_support = 0.5, use_colnames = True)
print(freq_items)

rules = association_rules(freq_items, metric ='support', min_threshold=0.05)
rules = rules.sort_values(['support', 'confidence'], ascending =[False,False])
rules