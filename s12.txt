//Write AJAX program to read contact.dat file and print the contents of the file in a tabular format when the user clicks on print button. Contact.dat file should contain srno, name, residence number, mobile number, Address.

//html
<html>
<head>
    <script type="text/javascript">
        function print() {
            var ob = false;
            ob = new XMLHttpRequest();

            ob.open("GET", "1.php?");
            ob.send();

            ob.onreadystatechange = function () {
                if (ob.readyState == 4 && ob.status == 200) {
                    document.getElementById("i").innerHTML = ob.responseText;
                }
            }
        }           
    </script>
</head>
<body>
    <center>
        <h3>Display the contents of a contact.dat file </h3>
        <br><input type="button" value=Print onclick="print()">
        <span id="i"></span>
    </center>
</body>
</html>

//php
<?php
    $fp = fopen('contacts.dat','r');
    echo "<table border=1>";
    echo "<tr><th>Sr. No.</th><th>Name</th><th>Residence No.</th><th>Mob. no.</th><th>Address</th></tr>";
             
    while($row =  fscanf($fp,"%s %s %s %s %s"))
    {
        echo "<tr>";
        foreach($row as $r)
        {
            echo "<td>$r</td>";                           
        }                           
        echo "</tr>";
    }
    echo "</table>";
    fclose($fp);
?>

//Create ‘heights-and-weights’ Data set . Build a linear regression model by identifying independent and target variable. Split the variables into training and testing sets and print them. Build a simple linear regression model for predicting purchases.

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

num_samples = 1000

heights = np.random.normal(170, 10, num_samples)
weights = 0.5 * heights + 30 + np.random.normal(0, 5, num_samples)

data = pd.DataFrame({'Height': heights, 'Weight': weights})

X = data[['Height']]
y = data['Weight']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = LinearRegression()
model.fit(X_train, y_train)
train_rmse = np.sqrt(mean_squared_error(y_train, model.predict(X_train)))
test_rmse = np.sqrt(mean_squared_error(y_test, model.predict(X_test)))

print("Training RMSE:", train_rmse)
print("Testing RMSE:", test_rmse)

plt.scatter(X_test, y_test, color = 'green')
plt.plot(X_train, model.predict(X_train), color='red',linewidth=3)
plt.title('Regression(Height Weight)')
plt.xlabel('Height')
plt.ylabel('Weight')
plt.show()