//Write Ajax program to get book details from XML file when user select a book name. Create XML file for storing details of book(title, author, year, price).

//html
<html>
<body>
<select id="bookSelect" onchange="titles()">
    <option value="">Select a book</option>
</select>

<div id="bookDetails"></div>

<script>
function titles() {
    var title = document.getElementById("bookSelect").value;
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
            document.getElementById("bookDetails").innerHTML = this.responseText;
        }
    };
    xhttp.open("GET", "1.php?title=" + title, true);
    xhttp.send();
}

window.onload = function() {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
            document.getElementById("bookSelect").innerHTML = this.responseText;
        }
    };
    xhttp.open("GET", "2.php", true);
    xhttp.send();
};
</script>
</body>
</html>

//1.php
<?php
if(isset($_GET['title'])) {
    $selectedTitle = $_GET['title'];
    $xml = simplexml_load_file('books.xml');
    $bookDetails = "";
    foreach($xml->children() as $book) {
        if($book->title == $selectedTitle) {
            $bookDetails .= "<p><strong>Title:</strong> " . $book->title . "</p>";
            $bookDetails .= "<p><strong>Author:</strong> " . $book->author . "</p>";
            $bookDetails .= "<p><strong>Year:</strong> " . $book->year . "</p>";
            $bookDetails .= "<p><strong>Price:</strong> $" . $book->price . "</p>";
        }
    }
    echo $bookDetails;
}
?>

//2.php
<?php
$xml = simplexml_load_file('books.xml');
$bookOptions = "<option value=''>Select a book</option>";
foreach($xml->children() as $book) {
    $title = $book->title;
    $bookOptions .= "<option value='$title'>$title</option>";
}
echo $bookOptions;
?>


//Consider any text paragraph. Preprocess the text to remove any special characters and digits. Generate the summary using extractive summarization process 
import re
from nltk.tokenize import sent_tokenize
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

text="Text summarization 09 is an NLP technique that extracts@ text , from a large amount of data .Its is a process of identifying the most important meaningful information in a document."

def preprocess_text(text):
    text = re.sub(r'[^a-zA-Z\s]', '', text)
    text = re.sub(r'\d+', '', text)
    return text.lower()

def tokenize_sentences(text):
    return sent_tokenize(text)

preprocessed_text = preprocess_text(text)
sentences = tokenize_sentences(preprocessed_text)

stop_words = set(stopwords.words("english"))
stemmer = PorterStemmer()

def preprocess_sentence(sentence):
    words = sentence.split()
    words = [stemmer.stem(word) for word in words if word not in stop_words]
    return ' '.join(words)

preprocessed_sentences = [preprocess_sentence(sentence) for sentence in sentences]
vectorizer = TfidfVectorizer()
tfidf_matrix = vectorizer.fit_transform(preprocessed_sentences)
cosine_sim_matrix = cosine_similarity(tfidf_matrix, tfidf_matrix)
sentence_scores = cosine_sim_matrix.sum(axis=1)
sorted_indices = sentence_scores.argsort()[::-1]
num_sentences_summary = 2
summary_sentences = [sentences[idx] for idx in sorted_indices[:num_sentences_summary]]
summary = ' '.join(summary_sentences)

print("Original Text:\n", text)
print("\nExtractive Summary:\n", summary)
